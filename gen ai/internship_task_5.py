# -*- coding: utf-8 -*-
"""internship-task-5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19uFJ1D0I3gKSiTIyVftvFyjPXeYlM8no
"""

pip install torch torchvision pillow

import os
from PIL import Image, UnidentifiedImageError
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import torch
from torchvision import models

# Load image from local file path
def load_local_image(image_path, max_size=400):
    try:
        # Open the image file
        image = Image.open(image_path).convert('RGB')

        # Resize image if larger than max_size
        if max(image.size) > max_size:
            size = max_size
        else:
            size = max(image.size)

        # Image transformation: Resize, ToTensor, and Normalize
        transform = transforms.Compose([
            transforms.Resize(size),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])

        # Transform image and add a batch dimension
        image = transform(image).unsqueeze(0)
        return image

    except UnidentifiedImageError:
        print(f"Error: Cannot identify image from the file path: {image_path}")
    except FileNotFoundError:
        print(f"Error: File not found: {image_path}")
    return None

# Function to convert image tensor back to a format that can be displayed
def im_convert(tensor):
    image = tensor.to("cpu").clone().detach()
    image = image.numpy().squeeze(0)
    image = image.transpose(1, 2, 0)
    image = image * [0.229, 0.224, 0.225] + [0.485, 0.456, 0.406]
    image = image.clip(0, 1)
    return image

# Load local content and style images
content_image_path = r"/content/How to Photograph Architecture in Paris.jpg"  # Update with the correct path
style_image_path = r"/content/download (1).jpeg"  # Update with the correct path

# Load the local images
content_image = load_local_image(content_image_path)
style_image = load_local_image(style_image_path)

# Ensure images are loaded successfully before proceeding
if content_image is None or style_image is None:
    print("Error: One or both images failed to load. Please check the file paths.")
else:
    # Load the VGG19 model
    vgg = models.vgg19(pretrained=True).features

    # Freeze model parameters
    for param in vgg.parameters():
        param.requires_grad_(False)

    # Perform neural style transfer
    output_image = content_image  # Just a placeholder. You need your style transfer function here.

    # Display results
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 3, 1)
    plt.title("Content Image")
    plt.imshow(im_convert(content_image))

    plt.subplot(1, 3, 2)
    plt.title("Style Image")
    plt.imshow(im_convert(style_image))

    plt.subplot(1, 3, 3)
    plt.title("Generated Image")
    plt.imshow(im_convert(output_image))

    plt.show()

